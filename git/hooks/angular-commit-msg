#!/bin/sh

# this looks for a file called commit-notes in the root of the repository
# and includes it in the commit body, so you can keep track of changes
# as you work on them and have them automatically pulled into the commit
# message.

MSG=""

# looks for a .gitmessage template, and if it finds it then it will
# include the contents in the commit message (since this overrides
# the default message)

# commitMSG=$(git config commit.template)
# eval commitMSG=$commitMSG # to eval '~'
# if [ -f "$commitMSG" ]; then
#     contents=$(cat $commitMSG)
#     MSG="$MSG$contents\n"
# fi

# checks for a file called commit-notes in the root directory, if that
# is found then it assumes that this has a list of notes that can be 
# added to the commit message
if [ -f "commit-notes" ]; then
	MSG="$MSG\n### imported from 'commit-notes'\n"
	while read line; do
		$MSG="$MSG\n#$line"
	done < commit-notes
    MSG="$MSG\n"
fi

# this checks for all angular like commits in the gitlog and shows the ones
# that have already been used for concistency

hooksRoot=$(git config core.hooksPath)
eval hooksRoot=$hooksRoot # to eval '~'

MSG="$MSG\n### previously used angular commit headers\n"
MSG="$MSG$(git log --pretty=oneline --abbrev-commit | python $hooksRoot/get-angular-types.py)\n"


# returns it to the parent script
echo "$MSG"
